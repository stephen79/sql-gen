{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["CallLogType","TipUserId","TipTableName","App","dateFormat","date","Date","tableName","useState","accountId","setAccountId","numberStart","setNumberStart","numberEnd","setNumberEnd","moment","subtract","format","dateStart","setDateStart","dateEnd","setDateEnd","reset","setReset","outputText","setOutputText","className","data-tip","value","onChange","e","target","place","type","effect","_numberEnd","_numberStart","parseInt","isValidPhoneNumber","_dateEnd","_dateStart","console","log","isValid","isBefore","isValidDate","name","checked","onClick","event","isAfter","aDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","finalText","i","Math","random","floor","OUTGOING_SUCCEEDED","INCOMING_REJECT","duration","INCOMING_RECEIVED","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5a25adad.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { MouseEvent } from 'react';\nimport './App.scss';\nimport moment from 'moment';\nimport ReactTooltip from 'react-tooltip'\n\nconst MAX_DURATION = 30*60;\nconst MIN_DURATION = 60;\n\nconst MAX_IDLE_INTERVAL = 30*60; // 30 min\nconst MIN_IDLE_INTERVA = 5*60; // 10 min\nexport enum CallLogType {\n    OUTGOING_SUCCEEDED = 1,\n    OUTGOING_NO_ANSWER = 2,\n    INCOMING_RECEIVED = 3,\n    // If modify this value, please update 20190214-add-call-conversation-update-trigger.js call_type value\n    INCOMING_MISSED = 4,\n    INCOMING_REJECT = 5\n}\n\nconst TipUserId = 'The user id of this logged-in user';\nconst TipTableName = 'The sql table to generate these record';\nconst TipPhoneNumberStart = 'The phone number to start generating calls, every phone number will generate a call log';\nconst TipPhoneNumberEnd = 'The phone number to end generating calls, every phone number will generate a call log';\nconst TipDateStart = 'The date range to generate call logs, the interval between every two call logs is 5~30 minutes';\nconst TipDateEnd = 'The date range to generate call logs, the interval between every two call logs is 5~30 minutes';\nfunction App() {\n  const dateFormat = 'YYYY-MM-DD HH:mm:ss.000 +00:00';\n  const validDateFormat = 'YYYY-MM-DD HH:mm';\n  const date = new Date();\n  const tableName = 'call_conversations';\n  // const accountId = '987';\n  const [ accountId, setAccountId] = useState('987');\n  const [ numberStart, setNumberStart] = useState('886277314001');\n  const [ numberEnd, setNumberEnd] = useState('886277314100');\n  const [ dateStart, setDateStart] = useState(moment(date).subtract(7, 'day').format(dateFormat));\n  const [ dateEnd, setDateEnd] = useState(moment(date).subtract(1, 'day').format(dateFormat));\n  const [ reset, setReset] = useState(false);\n\n  const numberRecord = 100;\n  const [ outputText, setOutputText] = useState('');\n  const randomSec = (): number => {\n\treturn MIN_IDLE_INTERVA + Math.random() * (MAX_IDLE_INTERVAL - MIN_IDLE_INTERVA);\n  }\n  const randomType = (): number => {\n\treturn Math.floor(CallLogType.OUTGOING_SUCCEEDED + Math.random() * (CallLogType.INCOMING_REJECT - CallLogType.OUTGOING_SUCCEEDED));\n  }\n  const randomDuration = (): number => {\n\treturn Math.floor(MIN_DURATION + Math.random() * (MAX_DURATION - MIN_DURATION));\n  }\n  const isValidPhoneNumber = (): boolean => {\n\tlet _numberEnd = 0, _numberStart = 0;\n\ttry {\n\t\t_numberEnd = parseInt(numberEnd);\n\t\t_numberStart = parseInt(numberStart);\n\t} catch (e) {\n\t\treturn false;\n\t}\n\tif (_numberEnd <= _numberStart) {\n\t\treturn false;\n\t}\n\treturn true;\n  }\n  const isValidDate = (): boolean => {\n\tlet _dateEnd = moment(), _dateStart = moment();\n\ttry {\n\t\t_dateEnd = moment(dateEnd, validDateFormat);\n\t\t_dateStart = moment(dateStart, validDateFormat);\n\t} catch (e) {\n\t\tconsole.log('catch moment error', e);\n\t\treturn false;\n\t}\n\tif (!_dateEnd.isValid() || !_dateStart.isValid()) {\n\t\tconsole.log('isValid _dateEnd moment', _dateEnd);\n\t\tconsole.log('isValid _dateStart moment', _dateStart);\n\t\treturn false;\n\t}\n\tif (_dateEnd.isBefore(_dateStart)) {\n\t\treturn false;\n\t}\n\treturn true;\n  }\n  const generate = (event: MouseEvent<HTMLButtonElement>) => {\n\t  setOutputText('');\n\t  let _numberEnd = 0, _numberStart = 0;\n\t  try {\n\t  \t_numberEnd = parseInt(numberEnd);\n\t  \t_numberStart = parseInt(numberStart);\n\t  } catch (e) {}\n\t  if (_numberEnd <= _numberStart) {\n\t\t  return;\n\t  }\n\t  if (moment(dateEnd, validDateFormat).isAfter(date)) {\n\t\treturn;\n\t  }\n\t  if (moment(dateStart, validDateFormat).isAfter(moment(dateEnd, validDateFormat))) {\n\t\treturn;\n\t  }\n\t  let aDate = moment(dateEnd, validDateFormat);\n\t  aDate.hours(date.getHours());\n\t  aDate.minutes(date.getMinutes());\n\t  aDate.seconds(date.getSeconds());\n\t  let finalText = '';\n\t  for (let i = _numberStart ; i <= _numberEnd; i++) {\n\t\t  aDate = aDate.subtract(randomSec(), 's');\n\t\t  if (aDate.isBefore(dateStart)) {\n\t\t\t  break;\n\t\t  }\n\t\t  const type = randomType();\n\t\t  let duration = 0;\n\t\t  if (type === CallLogType.OUTGOING_SUCCEEDED || type === CallLogType.INCOMING_RECEIVED) {\n\t\t\t  duration = randomDuration();\n\t\t  }\n\t\t  const line = `INSERT INTO ${tableName}(phone_number, call_type, date, account_id, duration, createdAt, updatedAt)\n\t\t  VALUES ('${i}', ${type}, '${aDate.format(dateFormat)}', '${accountId}',  ${duration}, '${aDate.format(dateFormat)}', '${aDate.format(dateFormat)}');\n`\n\t\t  finalText = line + finalText;\n\t  }\n\t  if (reset) {\n\t\tfinalText = `DELETE FROM ${tableName} WHERE account_id='${accountId}';\n` + finalText;\n\t  }\n\t  setOutputText(finalText);\n  };\n  return (\n    <div className=\"App\">\n\t\t<header className=\"App-header\">\n\t\t\tSQL-GEN\n\t\t</header>\n\t\t<div className='inputForm'>\n\t\t{/* {moment(date).format('YYYY-MM-DD hh:mm:ss.000 +00:00')} */}\n\t\t\t<div className='inputRow'>\n\t\t\t\t<div className='inputTitle' data-tip={TipUserId} >Account User Id:</div>\n\t\t\t\t<input value={accountId} data-tip={TipUserId} onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\t\t\tsetAccountId(e.target.value);\n\t\t\t\t}}/>\n\t\t\t\t<ReactTooltip place=\"bottom\" type=\"warning\" effect=\"solid\"/>\n\t\t\t</div>\n\t\t\t<div className='inputHint'>\n\t\t\t\t<div className='hintText'></div>\n\t\t\t</div>\n\n\t\t\t<div className='inputRow'>\n\t\t\t\t<div className='inputTitle' data-tip={TipTableName}>Table name:</div>\n\t\t\t\t<input value={tableName} data-tip={TipTableName}/>\n\t\t\t\t<ReactTooltip place=\"bottom\" type=\"warning\" effect=\"solid\"/>\n\t\t\t</div>\n\t\t\t<div className='inputHint'>\n\t\t\t\t<div className='hintText'></div>\n\t\t\t</div>\n\n\t\t\t<div className='inputRow'>\n\t\t\t\t<div className='inputTitle'>Phone number range:</div>\n\t\t\t\t<input value={numberStart} data-tip={TipPhoneNumberStart} onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\t\t\tsetNumberStart(e.target.value);\n\t\t\t\t}}/> -\n\t\t\t\t<input value={numberEnd} data-tip={TipPhoneNumberEnd} onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\t\t\tsetNumberEnd(e.target.value);\n\t\t\t\t}}/>\n\t\t\t\t<ReactTooltip place=\"bottom\" type=\"warning\" effect=\"solid\"/>\n\t\t\t</div>\n\t\t\t<div className='inputHint'>\n\t\t\t\t{ isValidPhoneNumber() ? (<div className='hintText'>The smaller phone number will be on the top. i.e. The smaller phone number call log would be newer.</div>) :\n\t\t\t\t\t(<div className='warnText'>Something wrong with the phone number or range.</div>)}\n\n\t\t\t</div>\n\n\t\t\t<div className='inputRow'>\n\t\t\t\t<div className='inputTitle'>Date range:</div>\n\t\t\t\t<input className='dateInput' value={dateStart} data-tip={TipDateStart}\n\t\t\t\t\tonChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\t\t\t\tsetDateStart(e.target.value);\n\t\t\t\t\t}}/> -\n\t\t\t\t<input className='dateInput' value={dateEnd} data-tip={TipDateEnd}\n\t\t\t\t\tonChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\t\t\t\tsetDateEnd(e.target.value);\n\t\t\t\t\t}}/>\n\t\t\t\t<ReactTooltip place=\"bottom\" type=\"warning\" effect=\"solid\"/>\n\t\t\t</div>\n\t\t\t<div className='inputHint'>\n\t\t\t\t{ isValidDate() ? (<div className='hintText'></div>) :\n\t\t\t\t\t(<div className='warnText'>Something wrong with the date or range.</div>)}\n\n\t\t\t</div>\n\t\t\t<div className='resetBox'>\n\t\t\t\t<input\n\t\t\t\t\tname=\"reset\"\n\t\t\t\t\ttype=\"checkbox\"\n\t\t\t\t\tchecked={reset}\n\t\t\t\t\tonChange={(e: React.ChangeEvent<HTMLInputElement>) => {\n\t\t\t\t\t\tsetReset(e.target.checked);\n\t\t\t\t\t}}/>\n\t\t\t\t<div>Reset this account's call log</div>\n\t\t\t</div>\n\t\t\t{/* <div className='inputRow'>\n\t\t\t\t<div className='inputTitle'>Number of records:</div>\n\t\t\t\t<input value={numberRecord}/>\n\t\t\t</div> */}\n\t\t\t<button className='genButton' onClick={generate}>Generate</button>\n\n\t\t</div>\n\t\t<textarea className='outputText' value={outputText}></textarea>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}